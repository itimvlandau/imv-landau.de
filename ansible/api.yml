---
- hosts: all
  become: true
  gather_facts: true # (we don't need to check the connectivity between master and other nodes)

  pre_tasks:
    - name: APT | Set env variables
      set_fact:
        env_vars:
          DEBIAN_FRONTEND: noninteractive
          DEBIAN_PRIORITY: critical

    - name: APT | Fix any potential dpkg issues
      shell: dpkg --configure --pending

    - name: APT | Kill existing apt and apt-get
      shell: "killall apt apt-get >/dev/null 2>&1 || :"
      ignore_errors: yes

    - name: APT | Fix any potential apt issues
      shell: apt-get install --fix-broken --quiet --yes
      args:
        warn: false
      environment: "{{ env_vars }}"
      ignore_errors: yes

    - name: "Install apt packages"
      apt:
        update_cache: yes
        name: "{{ apt_packages }}"
        state: present

#    - name: APT | APT update
#      apt:
#        update_cache: yes
#      ignore_errors: yes

    # https://serverfault.com/a/839563
    # https://raymii.org/s/tutorials/Silent-automatic-apt-get-upgrade.html
#    - name: APT | APT upgrade
#      shell: apt-get upgrade --quiet --yes --allow-unauthenticated -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold"
#      environment: "{{ env_vars }}"
#      args:
#        warn: false
#      ignore_errors: yes

    # https://serverfault.com/a/839563
    # https://raymii.org/s/tutorials/Silent-automatic-apt-get-upgrade.html
#    - name: APT | APT dist-upgrade
#      shell: apt-get dist-upgrade --quiet --yes --allow-unauthenticated -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold"
#      environment: "{{ env_vars }}"
#      args:
#        warn: false
#      ignore_errors: yes

    - name: APT | Remove useless packages from the cache
      apt:
        autoclean: yes
      ignore_errors: yes

    - name: APT | Remove dependencies that are no longer required
      apt:
        autoremove: yes
      ignore_errors: yes

  tasks:
    - name: Set bashrc files
      import_tasks: tasks/bashrc.yml

    - name: Prepare to install the correct PHP version
      import_role:
        name: geerlingguy.php-versions
      tags: php

    - name: Install PHP
      import_role:
        name: geerlingguy.php
      tags: php

    - name: Create SSL certificates
      when: env == "prod"
      include_role:
        name: geerlingguy.certbot

    - name: Install Adminer
      import_role:
        name: geerlingguy.adminer

    - name: Copy custom Adminer theme
      copy:
        src: ./files/adminer.css
        dest: "{{ adminer_install_dir }}"
        mode: 0644

    - name: Install NGINX
      include_role:
        name: geerlingguy.nginx
      vars:
        nginx_remove_default_vhost: true
        nginx_user: "{{ user }}"
        ### necessary because of virtual box nfs problem
        ### https://stackoverflow.com/questions/9479117/vagrant-virtualbox-apache2-strange-cache-behaviour
        nginx_vhosts:
          - listen: "80"
            server_name: _  # (unused but playbook crashes without it)
            return: "301 https://{{ domain }}$request_uri"
            filename: "{{ domain }}.client.80.conf"
          - listen: "443 ssl http2"
            server_name: _  # (unused but playbook crashes without it)
            root: "{{ root_path }}"
            filename: "{{ domain }}.client.443.conf"
            state: "present"
            extra_parameters: |
              sendfile {{ 'off' if env == 'dev' else 'on' }};
              location / {
                root {{ client_public_path }};
                index index.html;
                try_files $uri $uri/ /index.html;
              }
              location /api {
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header Host $host;
                proxy_pass http://127.0.0.1:85;
              }
              location /adminer {
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header Host $host;
                proxy_pass http://127.0.0.1:8585;
              }
              location = /favicon.ico {
                root {{ client_public_path }};
                access_log off;
                log_not_found off;
              }
              location = /robots.txt  {
                root {{ client_public_path }};
                access_log off;
                log_not_found off;
              }
              location ~ /\.(?!well-known).* {
                  deny all;
              }
              location = /50x.html {
                root /usr/share/nginx/html;
              }
              ssl_certificate /etc/letsencrypt/live/{{ domain }}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/{{ domain }}/privkey.pem;
              ssl_protocols TLSv1.1 TLSv1.2;
              ssl_ciphers HIGH:!aNULL:!MD5;
            error_page: "500 502 503 504  /50x.html"
            access_log: "/var/log/nginx/{{ domain }}-client.log"
            error_log: "/var/log/nginx/{{ domain }}-client-error.log"
          - listen: "85"
            server_name: _  # (unused but playbook crashes without it)
            filename: "{{ domain }}.api.conf"
            root: "{{ api_public_path }}"
            index: "index.php index.html index.htm"
            state: "present"
            extra_parameters: |
              sendfile {{ 'off' if env == 'dev' else 'on' }};
              location / {
                try_files $uri $uri/ /index.php?$query_string;
              }
              location ~ \.php$ {
                  fastcgi_pass 127.0.0.1:9000;
                  fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
                  include fastcgi_params;

                  fastcgi_buffer_size 128k;
                  fastcgi_buffers 256 16k;
                  fastcgi_busy_buffers_size 256k;
                  fastcgi_temp_file_write_size 256k;
              }
            access_log: "/var/log/nginx/{{ domain }}-api.log"
            error_log: "/var/log/nginx/{{ domain }}-api-error.log"
            error_page: "404 /index.php"
          - listen: "8585"
            server_name: _  # (unused but playbook crashes without it)
            filename: "{{ domain }}.db.conf"
            root: "{{ adminer_install_dir }}"
            index: "index.php adminer.php"
            state: "present"
            extra_parameters: |
              sendfile {{ 'off' if env == 'dev' else 'on' }};
              location / {
                try_files $uri $uri/ /index.php?$query_string;
              }
              location ~ \.php$ {
                  fastcgi_pass 127.0.0.1:9000;
                  fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
                  include fastcgi_params;

                  fastcgi_buffer_size 128k;
                  fastcgi_buffers 256 16k;
                  fastcgi_busy_buffers_size 256k;
                  fastcgi_temp_file_write_size 256k;
              }
            access_log: "/var/log/nginx/{{ domain }}-db.log"
            error_log: "/var/log/nginx/{{ domain }}-db-error.log"
            error_page: "404 /index.php"

    - name: Install composer
      include_role:
        name: geerlingguy.composer

    - name: Install mysql server
      include_role:
        name: geerlingguy.mysql
      vars:
        mysql_root_password: "{{ pmb_database_root_password }}"
        mysql_root_password_update: no
        mysql_databases:
          - name: "{{ pmb_database_name }}"
            encoding: "utf8"
            collation: "utf8_general_ci"
        mysql_users:
          - name: "{{ pmb_database_user }}"
            host: "localhost"
            password: "{{ pmb_database_password }}"
            priv: "{{ pmb_database_name }}.*:ALL"
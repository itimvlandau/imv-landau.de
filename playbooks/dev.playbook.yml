---
- hosts: localhost
  become: true
  become_user: root
  gather_facts: no # (we don't need to check the connectivity between master and other nodes)
  vars_files:
  - ./vars/main.yml

  vars_prompt:
    - name: api_env
      prompt: "Enter the environment for your Symfony app (prod|dev|test)"
      default: dev
      private: no

  environment:
    SYMFONY_ENV: "{{ api_env|lower }}"


  handlers:
    - name: Restart PHP-FPM
      become: true
      service:
        name: php8-fpm
        state: restarted


  pre_tasks:
    - name: Convert entered Symfony environment to lowercase
      set_fact:
        api_env: "{{ api_env|lower }}"
      tags:
        - always

    - name: Update APT package manager repositories cache
      become: true
      apt:
        update_cache: yes

  - name: Upgrade installed packages
    become: true
    apt:
      upgrade: dist


  roles:
    - nginx


  tasks:

    # apt update/upgrade

    - name: "********* apt install ... *********"
      apt:
        name: "{{ apt_packages }}"
        state: latest

    # bashrc

    - name: "Add alias for {{ user }}"
      lineinfile:
        path="{{ home_path }}/.bashrc"
        line="{{ item }}"
        owner="{{ user }}"
        regexp="{{ item }}"
        state=present
        insertafter=EOF
        create=True
      with_items: "{{ bashrc_lines }}"

    - name: "Add alias for root"
      lineinfile:
        path="/root/.bashrc"
        line="{{ item }}"
        owner="root"
        regexp="{{ item }}"
        state=present
        insertafter=EOF
        create=True
      with_items: "{{ bashrc_lines }}"

    - name: "source {{ home_path }}/.bashrc"
      shell: "source {{ home_path }}/.bashrc"
      args:
         executable: /bin/bash

    - name: "source /root/.bashrc"
      shell: "source /root/.bashrc"
      become: true
      become_user: root
      args:
         executable: /bin/bash

    # nodejs

    - name: "download nodejs **************************************************"
      get_url: url=https://deb.nodesource.com/setup_14.x dest=/opt mode=755

    - name: "********* setup nodejs *********"
      command: /opt/setup_14.x
      changed_when: false

    - name: "********* npm install -g ... *********"
      npm:
        name: "{{ item }}"
        global: yes
      with_items: "{{ npm_packages }}"

    # www

    - name: "********* create node_modules directory in home *********"
      become: true
      become_user: "{{ user }}"
      file:
        path: "{{ home_path }}/{{ project_initials }}_node_modules"
        state: directory

    - name: "********* create node_modules directory in {{ client_path }} *********"
      file:
        path: "{{ client_path }}/node_modules"
        state: directory

    - name: "********* mount node_modules directory to {{ home_path }}/{{ project_initials }}_node_modules *********"
      mount:
        path: "{{ client_path }}/node_modules"
        src: "{{ home_path }}/{{ project_initials }}_node_modules"
        opts: bind,rw
        state: mounted
        fstype: none

    - name: "********* npm install *********"
      npm:
        path: "{{ client_path }}"
        state: present

    # php and nginx

    - name: Install MySQL DB server
      apt:
        name: mysql-server
        state: latest

    - name: Add PHP 8 PPA repository
      apt_repository:
        repo: 'ppa:ondrej/php'

    - name: "Install PHP packages"
      apt:
        name: "{{ php_packages }}"
        state: latest
      notify: Restart PHP-FPM

    - name: Set date.timezone for CLI
      lineinfile:
        path: /etc/php/8/cli/php.ini
        regexp: "date.timezone ="
        line: "date.timezone = Europe/Berlin"
      notify: Restart PHP-FPM

    # - name: Set date.timezone for PHP
    #   become: true
    #   ini_file:
    #     path: /etc/php/8/fpm/php.ini
    #     section: "{{ item.section }}"
    #     option: "{{ item.option }}"
    #     value: "{{ item.value }}"
    #   with_items:
    #     - { section: Date, option: date.timezone, value: Europe/Berlin }
    #     - { section: PHP, option: max_execution_time, value: 60 }
    #     - { section: PHP, option: memory_limit, value: 512M }

    - name: Check for Composer
      stat:
        path: /usr/local/bin/composer
      register: composer_stat
      tags:
        - deploy # ansible-playbook ansible/playbook.yml -i ansible/hosts.ini --skip-tags deploy

    - name: Download Composer
      script: scripts/install_composer.sh
      when: not composer_stat.stat.exists
      tags:
        - deploy

    - name: Move Composer globally
      become: true
      command: mv composer.phar /usr/local/bin/composer
      when: not composer_stat.stat.exists
      tags:
        - deploy

    - name: Set permissions on Composer
      become: true
      file:
        path: /usr/local/bin/composer
        mode: "a+x"
      when: not composer_stat.stat.exists
      tags:
        - deploy

    # ansible-playbook ansible/playbook.yml -i ansible/hosts.ini -t deploy --verbose
    - name: Make sure composer is at its latest version
      composer:
        working_dir: "{{ api_path }}"
        command: self-update
      when: not composer_stat.stat.exists
      register: composer_self_update
      changed_when: composer_self_update.stdout is not search('You are already using composer version')
      tags:
        - deploy

    - name: Install Composer's dependencies
      composer:
        working_dir: "{{ api_path }}"
        no_dev: "{{ 'yes' if ('prod' == api_env) else 'no' }}"
      tags:
        - deploy

    # - name: Check requirements
    #   become: true
    #   command: "php {{ api_path }}/vendor/bin/symfony_requirements"

    - name: Fix var directory permissions
      file:
        path: "{{ api_var_dir }}"
        state: directory
        mode: 0777
        recurse: yes
      changed_when: false
      tags:
        - permissions # ansible-playbook ansible/playbook.yml -i ansible/hosts.ini -t permissions


    # Symfony console commands

    - name: Create DB if not exists
      command: '{{ api_console_path }} doctrine:database:create --if-not-exists'
      register: db_create_result
      changed_when: db_create_result.stdout is not search('already exists. Skipped')

    # - debug:
    #     var: db_create_result
    #   tags:
    #     - deploy

    - name: Execute migrations
      command: '{{ api_console_path }} doctrine:migrations:migrate --no-interaction'
      register: db_migrations_result
      changed_when: db_migrations_result.stdout is not search('No migrations to execute')

    - name: Load data fixtures
      command: '{{ api_console_path }} hautelook_alice:doctrine:fixtures:load --no-interaction'
      changed_when: false
      when: api_env != "prod"

    - name: Clear cache
      command: '{{ api_console_path }} cache:clear --env={{ api_env }}'
      changed_when: false
      tags:
        - deploy
